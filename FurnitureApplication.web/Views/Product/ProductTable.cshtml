@model ProductSearchViewModel
@{
    ViewBag.Title = "ProductTable";
}

<form method="post">
    <div style="margin-bottom: 30px; overflow: hidden;">
        <div class="col-lg-6 float-right">
            <button class="btn btn-primary float-right" type="button" onclick="location.href='@Url.Action("Create")'" id="newBtn">New Product</button>
        </div>
        <div class="col-lg-6 float-left">
            <div class="search-box create-page">
                <div class="search-row">
                    <input class="form-control" id="searchTxt" type="text" name="Search" value="@Model.SearchTerm" placeholder="Search" />
                    <span onclick="action" id="searchBtn" class="ico-search10"></span>
                </div>
            </div>
        </div>
    </div>
</form>
<div>
    <table class="table table-hover" id="ProductsTable">
        <thead>
            <tr>
                <th scope="col">Product Name</th>
                <th scope="col">Category</th>
                <th scope="col">Price</th>
                <th scope="col">Description</th>
                <th scope="col">Action</th>
            </tr>
        </thead>
        <tbody>
            @if (Model.Products != null && Model.Products.Count > 0)
            {
                foreach (var product in Model.Products)
                {
                    <tr>
                        <td>@product.Name</td>
                        <td>
                            @if (product.Category != null)
                            {
                                <text>@product.Category.Name</text>
                            }
                            else
                            {
                                <span>-</span>
                            }
                        </td>
                        <td>@product.Price</td>
                        <td><div class="description ellipsis">@product.Description</div></td>
                        <td>
                            <button class="action ico-pencil5" onclick="location.href='@Url.Action("Edit", "Product" , new RouteValueDictionary(new { id = product.ID }))'" data-id="@product.ID"></button>
                            <button class="action ico-trash-can deleteBtn" data-id="@product.ID"></button>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td class="text-center text-danger" colspan="5">No Product found</td>
                </tr>
            }
        </tbody>
    </table>
    <div>
        @if (Model.Pager != null && Model.Pager.TotalPages > 1)
        {

            if (Model.Pager.CurrentPage > 1)
            {
                <button class="pageButtons" data-pageno="1">First</button>
                <button class="pageButtons" data-pageno="@(Model.Pager.CurrentPage - 1)">Previous</button>}

            for (var page = Model.Pager.StartPage; page <= Model.Pager.EndPage; page++)
            {
                string activeClass = Model.Pager.CurrentPage == page ? "active bg-info" : string.Empty;

                <button class="@activeClass pageButtons" data-pageno="@page">@page</button>}

            if (Model.Pager.CurrentPage < Model.Pager.TotalPages)
            {
                <button class="pageButtons" data-pageno="@(Model.Pager.CurrentPage + 1)">Next</button>
                <button class="pageButtons" data-pageno="@Model.Pager.EndPage">Last</button>}
        }
    </div>
</div>
<script>
    //$('#ProductsTable').DataTable();

    $(".pageButtons").click(function () {
        $.ajax({
            url: '@Url.Action("CategoryTable", "Category")',
            data: {
                pageNo: $(this).attr("data-pageNo"),
                search: '@Model.SearchTerm'
            }
        })
        .done(function (response) {
            $("#tableContiner").html(response);
        })
        .fail(function (XMLHttpRequest, textStatus, errorThrown) {
            alert("FAIL");
        });
    });

    $(".page-link").click(function () {
        $.ajax({
            url: "/Product/ProductTable",
            data: {
                pageNo : $(this).attr("data-pageNo")
            }
        })
        .done(function (response) {
            $("#tableContainer").html(response);
        })
        .fail(function (XMLHttpRequest, textStatus, errorThrown) {
            alert("Fail")
        });
    });

    $("#searchBtn").click(function () {
        var searchValue = $("#searchTxt").val();

        $.ajax({
            url: '@Url.Action("ProductTable", "Product")',
            data: {
                search: searchValue
            }
        })
        .done(function (response) {
            $("#tableContiner").html(response);
            window.location.href = "/Product/index";
        })
        .fail(function (XMLHttpRequest, textStatus, errorThrown) {
            alert("Fail")
        });
    });

    $("#newBtn").click(function () {
        $.ajax({
            url: "/Product/Create",
        })
        .done(function (response) {
            $("#actionContainer").html(response);
        })
        .fail(function (XMLHttpRequest, textStatus, errorThrown) {
            alert("Fail")
        });
    });


    $(".deleteBtn").click(function () {
        swal({
            title: "Are tou sure you want to delete this product?",
            text: "Once deleted, you will not be able to recover this imaginary product!",
            icon: "warning",
            buttons: true,
            dangerMode: true,
        })
        .then((willDelete) => {
            if (willDelete) {

                $.ajax({
                    type: "POST",
                    url: "/Product/Delete",
                    data: {
                        ID: $(this).attr("data-id")
                    }
                })
                .done(function (response) {
                    window.location.reload(false);
                    //$("html").html(response);
                    //$("#tableContainer").html(response);

                    swal("Record deleted successfully!", {
                        icon: "success",
                    });
                })
                .fail(function (XMLHttpRequest, textStatus, errorThrown) {
                    alert("Fail")
                });
            }
            else {
                swal("Your imaginary file is safe!");
            }
        });
    });
    var products = [];

    $(".addToCart").click(function () {

        var productID = $(this).attr("data-id");

        products.push(productID)

        $.cookie("CartProducts", products.join("-"), { path: "/"});

        alert("add to cart added");
    });

    $("#cancelBtn").click(function () {
        $("#actionContainer").html("");
    })

    function focussAction() {
        $("html, body").animate({
            scrollTop: $("#actionContainer").offset().top - 100
        }, 1000);
    }
</script>

