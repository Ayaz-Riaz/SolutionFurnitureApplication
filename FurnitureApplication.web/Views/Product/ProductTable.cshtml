@model ProductSearchViewModel
@{
    ViewBag.Title = "ProductTable";
}

<form method="post">
    <div style="margin-bottom: 30px; overflow: hidden;">
        <div class="col-lg-6 float-right">
            <button class="btn btn-primary float-right" type="button" onclick="location.href='@Url.Action("Create")'" id="newBtn">New Product</button>
        </div>
        <div class="col-lg-6 float-left">
            <div class="search-box create-page">
                <div class="search-row">
                    <input class="form-control" id="searchTxt" type="text" value="" placeholder="Search" />
                    <span onclick="action" id="searchBtn" class="ico-search10"></span>
                </div>
            </div>
        </div>
    </div>
</form>
<div>
    <table class="table table-hover" id="ProductsTable">
        <thead>
            <tr>
                <th scope="col">Product Name</th>
                <th scope="col">Category</th>
                <th scope="col">Price</th>
                <th scope="col">Description</th>
                <th scope="col">Action</th>
            </tr>
        </thead>
        <tbody>
            @if (Model.Products != null && Model.Products.Count > 0)
            {
                foreach (var product in Model.Products)
                {
                    <tr>
                        <td>@product.Name</td>
                        <td>
                            @if (product.Category != null)
                            {
                                <text>@product.Category.Name</text>
                            }
                            else
                            {
                                <span>-</span>
                            }
                        </td>
                        <td>@product.Price</td>
                        <td>@product.Description</td>
                        <td>
                            <button class="btn btn-primary editBtn" onclick="location.href='@Url.Action("Edit", "Product" , new RouteValueDictionary(new { id = product.ID }))'" data-id="@product.ID">Edit</button>
                            <button class="btn btn-primary deleteBtn" data-id="@product.ID">Delete</button>
                            <button class="btn btn-primary addToCart" data-id="@product.ID">Add to Cart</button>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td class="text-center text-danger" colspan="5">No Product found</td>
                </tr>
            }
        </tbody>
    </table>
    @*<nav aria-label="Page navigation example">
        <ul class="pagination justify-content-center">
            @if (Model.PageNo != 1)
            {
                <li class="page-item">
                    <a class="page-link" id="PreviousRecord" data-pageNo="@(Model.PageNo - 1)" href="#" aria-label="Previous">
                        <span aria-hidden="true">&laquo;</span>
                        <span class="sr-only">Previous</span>
                    </a>
                </li>
            }
            <li class="page-item"><a class="page-link" href="#">1</a></li>
            <li class="page-item"><a class="page-link" href="#">2</a></li>
            <li class="page-item"><a class="page-link" href="#">3</a></li>
            <li class="page-item">
                <a class="page-link" id="NextRecord" data-pageNo="@(Model.PageNo + 1)" href="#" aria-label="Next">
                    <span aria-hidden="true">&raquo;</span>
                    <span class="sr-only">Next</span>
                </a>
            </li>
        </ul>
    </nav>*@
</div>
<script>
    $('#ProductsTable').DataTable();

    $(".page-link").click(function () {
        $.ajax({
            url: "/Product/ProductTable",
            data: {
                pageNo : $(this).attr("data-pageNo")
            }
        })
        .done(function (response) {
            $("#tableContainer").html(response);
        })
        .fail(function (XMLHttpRequest, textStatus, errorThrown) {
            alert("Fail")
        });
    });

    $("#searchBtn").click(function () {
        var searchValue = $("#searchTxt").val();

        $.ajax({
            type: "GET",
            url: "/Product/ProductTable",
            data: {
                search: searchValue
            }
        })
        .done(function (response) {
            $("#tableContainer").html(response);
            focussAction();
        })
        .fail(function (XMLHttpRequest, textStatus, errorThrown) {
            alert("Fail")
        });
    });

    $("#newBtn").click(function () {
        $.ajax({
            url: "/Product/Create",
        })
        .done(function (response) {
            $("#actionContainer").html(response);

            focussAction();
        })
        .fail(function (XMLHttpRequest, textStatus, errorThrown) {
            alert("Fail")
        });
    });

    $(".editBtn").click(function () {
        $.ajax({
            url: "/Product/Edit",
            data: {
                ID: $(this).attr("data-id")
            }
        })
        .done(function (response) {
            $("#actionContainer").html(response);
            focussAction();
        })
        .fail(function (XMLHttpRequest, textStatus, errorThrown) {
            alert("Fail")
        });
    });

    $(".deleteBtn").click(function () {
        swal({
            title: "Are tou sure you want to delete this product?",
            text: "Once deleted, you will not be able to recover this imaginary product!",
            icon: "warning",
            buttons: true,
            dangerMode: true,
        })
        .then((willDelete) => {
            if (willDelete) {
                
                $.ajax({
                    type: "POST",
                    url: "/Product/Delete",
                    data: {
                        ID: $(this).attr("data-id")
                    }
                })
                .done(function (response) {
                    $("#tableContainer").html(response);

                    swal("Record deleted successfully!", {
                        icon: "success",
                    });
                })
                .fail(function (XMLHttpRequest, textStatus, errorThrown) {
                    alert("Fail")
                });
            }
            else {
                swal("Your imaginary file is safe!");
            }
        });
    });
    var products = [];

    $(".addToCart").click(function () {

        var productID = $(this).attr("data-id");

        products.push(productID)

        $.cookie("CartProducts", products.join("-"), { path: "/"});

        alert("add to cart added");
    });

    $("#cancelBtn").click(function () {
        $("#actionContainer").html("");
    })

    function focussAction() {
        $("html, body").animate({
            scrollTop: $("#actionContainer").offset().top - 100
        }, 1000);
    }
</script>

